# -*- coding: utf-8 -*-
"""
Created on Tue Oct 17 10:57:58 2017

@author: intern

利用sklearn计算risk-model
"""

# 载入模块
from dataBaseQuery import DataBaseRun
import h5py
from datetime import datetime
import time
import numpy as np
import pandas as pd
from sklearn import linear_model

#import scipy.optimize as sco
#import scipy.interpolate as sci

class Risk_Model():
    
    def __init__(self,database):
        '''
        定义初始变量
        输出参数：
        -------
        database：str
            需要连接的数据库，'qa'或者'wind'
        '''
        self.db = DataBaseRun(database)
        self.fileName = 'risk_model_daily.h5'
        self.file = h5py.File(self.fileName, 'a')          # 创建hdf5文件
        self.tradedate = []                                # 交易日期
        self.style_factor_list = ['res_vol','sze','beta','mom','nls','bp','earn_yield',
                            'growth','leverage','liquidity']
                                                           # 风格因子列表
        self.sector_factor_list = []                       # 行业因子列表
        self.sector_weight = pd.Series()                 # 各行业权重    
        self.factor_list = []                              # 全因子列表
#        self.init_fret = 
#        np.array(len(self.factor_list) * [1./len(self.factor_list)])
        
        self.temp_rmdf = pd.DataFrame()                   # 用于临时储存的DataFrame
        
        
    def getFactorPeriod(self, start = '20100104'):
        '''
        选取风险模型回测日期
        输出参数：
        --------
        start: str
            初始日期，格式 '%Y%m%d'
       '''                  
        sql = '''
            select distinct tradedate from factordatap 
                where tradedate >= #startdate# 
                order by tradedate
            '''
        sql = sql.replace("#startdate#",start)
        t_date = self.db.exec_sql_bysingle(sql)
        t_date = [str(x) for x in t_date]
        
        # 匹配内部变量
        self.tradedate = t_date
        return t_date
    
        
    def getCurrentDate(self):
        '''
        获取当天交易日
        '''
        return time.strftime('%Y%m%d',time.localtime(time.time()))
    
    
    def fetch_historical_risk_model_daily(self):
        '''
        读取风险模型每日数值
        '''
        for t in self.tradedate:            
            sql = '''           
                select a.tradedate, a.secucode, b.pricechange, d.firstname, a."100099" res_vol, a."100101" sze, a."100103" beta, a."100105" mom, a."100107" NLS,
                a."100108" bp, a."100115" earn_yield, a."100116" growth, a."100117" leverage, a."100118" liquidity, c.weight3, c.weight4
                from factordatap a
                     left outer join allashare b
                          on a.tradedate = b.tradedate
                          and a.secucode = b.secucode
                            left outer join mv_industry_today d
                                 on a.secucode = d.secucode
                                   inner join rmestu c
                                       on a.tradedate = c.tradedate
                                       and a.secucode = c.secucode
                                       where a.tradedate = #time#
                                       order by a.tradedate
                 '''
            sql = sql.replace("#time#",t)
            df = self.db.exec_sql_byResult(sql)

            # 若因子值不存在，则用0填充
            df.replace(np.nan, 0, inplace = True)
            
            df.to_hdf(self.fileName,'risk_model_'+t, mode = 'a')
                 
    
    def check_risk_model_avaliability(self,
                                      datetime=None):
        '''
        检查风险模型是否存在(默认检查最新的时间)
        输入参数：
        --------
        datetime: str
            如果不输入默认为None,则提取系统当前日期
        
        输出参数：
        --------
        True/False: bool
            如果数据已经存在HDF5数据表中，则返回True，反之则为False
        '''
        if datetime is None:
            datetime = self.getCurrentDate()
                
        try:
            # 检测数据是否存在
            _check = pd.read_hdf(self.fileName, key = 'risk_model_' + datetime, mode = 'r')
            del _check
            return True            
        except:
            print('risk_model_' + datetime + ' does not exist')
            return False
        
        
    def calc_risk_model_daily(self, datetime = None, method = 'WLS'):
        '''
        读取特定日期风险数据并储存
        输入参数：
        --------
        datetime: str
            如果不输入默认为None,则提取系统当前日期
        method: str
            {'WLS','Lasso'}选择回归方法
        '''
        # 如果datetime没有输入，则选取当天最新日期
        if datetime is None:
            datetime = self.getFactorPeriod()
            
        for t in datetime:
            # 检查特定时间的风险模型是否存在
            # 如果模型数据存在
            if self.check_risk_model_avaliability(t):
                print('risk_model_' + t + ' existes')
            else:
                sql = '''           
                    select a.tradedate, a.secucode, b.pricechange, d.firstname, a."100099" res_vol, a."100101" sze, a."100103" beta, a."100105" mom, a."100107" NLS,
                    a."100108" bp, a."100115" earn_yield, a."100116" growth, a."100117" leverage, a."100118" liquidity, c.weight3, c.weight4
                    from factordatap a
                         left outer join allashare b
                              on a.tradedate = b.tradedate
                              and a.secucode = b.secucode
                                left outer join mv_industry_today d
                                     on a.secucode = d.secucode
                                       inner join rmestu c
                                           on a.tradedate = c.tradedate
                                           and a.secucode = c.secucode
                                           where a.tradedate = #time#
                     '''
                sql = sql.replace("#time#",t)
                df = self.db.exec_sql_byResult(sql)
    
                # 若因子值不存在，则用0填充
                df.replace(np.nan, 0, inplace = True)
                
                # 将行业列变成哑变量形式合并
                df_dummy = pd.get_dummies(df,columns = ['firstname'])
                df_dummy.to_hdf(self.fileName,'risk_model_' + t, mode = 'a')
                print('risk_model_' + t + ' has been updated')
                
                # 提取行业因子
                _sector_factor = [i for i in df_dummy.columns if 'firstname_' in i]               
                
                # 计算行业权重
#                ind_weight = pd.DataFrame(columns = self.sector_factor_list)
#                for i in self.sector_factor_list:
#                    ind_weight[i] = df_dummy['weight4'].values * df[i]
                    
#                self.sector_weight = ind_weight.sum(axis = 0)
                                   
                # 匹配内部变量
                self.sector_factor_list = _sector_factor
                _factor_list = self.style_factor_list + _sector_factor
                self.factor_list = _factor_list
                if method == 'Lasso':
                    _clf = linear_model.Lasso(alpha = 0, normalize = True)
                    _X = (df_dummy['weight3'] * df_dummy[_factor_list].T).T
                    _Y = df_dummy['pricechange']
                    _clf.fit(_X,_Y)
                    _coef = pd.Series(_clf.coef_, index = self.factor_list)
                    print('factor_return_' + t + ' has been calculated by lasso')
                    
                    _coef.to_hdf(self.fileName,'factor_return_' + t, mode = 'a')
                    
                elif method == 'WLS':
                    import statsmodels.api as sm
                    Y = df_dummy['pricechange']
                    X = df_dummy[_factor_list]
                    X = sm.add_constant(X)
                    wls_model = sm.WLS(Y,X,weights = df_dummy['weight3'])
                    results = wls_model.fit()
                    _coef = results.params.ix[_factor_list]
                    print('factor_return_' + t + ' has been calculated by wls')
                    
                    _coef.to_hdf(self.fileName,'factor_return_' + t, mode = 'a')
                    
                    
    
    def read_risk_model(self,datetime = None):
        '''
        读取HDF5文件中的Key
        输入参数：
        --------
        datetime: str
            如果不输入默认为None,则提取系统当前日期
        '''
        if datetime is None:
            datetime = self.getCurrentDate()
            
        df = pd.read_hdf(self.fileName,key = 'risk_model_'+datetime)
        df1 = pd.read_hdf(self.fileName,key = 'factor_return_'+datetime)
        return df,df1
        

    
if __name__ == '__main__':
    proj_start = datetime.now()
    model = Risk_Model('qa')
    rm_date = model.getFactorPeriod()
    update = model.calc_risk_model_daily()
    df, df1 = model.read_risk_model(rm_date[-1])
    proj_end = datetime.now()
    print('project costs ' + (proj_end - proj_start).seconds)
    
    
